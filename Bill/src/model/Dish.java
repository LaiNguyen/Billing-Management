package model;
// Generated Mar 23, 2017 10:43:43 AM by Hibernate Tools 4.3.1


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import org.hibernate.HibernateException;
import util.HibernateUtil;

/**
 * Dish generated by hbm2java
 */
public class Dish  implements java.io.Serializable, Persistence {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int id;

    private String name;
    private float capital;
    private float price;
    private short type;
    private Date createdAt;
    private Date updatedAt;
    private String createdBy;
    private String updatedBy;
    
    // type static properties
    public static Short TYPE_FOOD = 0;
    public static Short TYPE_DRINK = 1;
    public static Map<Short, String> TYPE_DEFINITION;
    static {
        TYPE_DEFINITION = new HashMap<>();
        TYPE_DEFINITION.put(TYPE_FOOD, "Đồ Ăn");
        TYPE_DEFINITION.put(TYPE_DRINK, "Thức Uống");
    }
    
    // query static properties
    private static String QUERY_BASED_ON_DISH_NAME = "from Dish a where a.name like '";
    private static String QUERY_BASED_ON_ID = "from Dish a where a.id=";

    public Dish() {
    }
   
    public int getId() {
        return this.id;
    }
    
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return this.name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    public float getPrice() {
        return this.price;
    }
    
    public void setPrice(float price) {
        this.price = price;
    }
    public short getType() {
        return this.type;
    }
    
    public void setType(short type) {
        this.type = type;
    }
    public Date getCreatedAt() {
        return this.createdAt;
    }
    
    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }
    public Date getUpdatedAt() {
        return this.updatedAt;
    }
    
    public void setUpdatedAt(Date updatedAt) {
        this.updatedAt = updatedAt;
    }
    public String getCreatedBy() {
        return this.createdBy;
    }
    
    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }
    
    public String getUpdatedBy() {
        return updatedBy;
    }

    public void setUpdatedBy(String updatedBy) {
        this.updatedBy = updatedBy;
    }

    public float getCapital() {
        return capital;
    }

    public void setCapital(float capital) {
        this.capital = capital;
    }
    
    public static List<Dish> getAll() {
        List<Dish> all = new ArrayList<Dish>();
        all = HibernateUtil.executeSelectHQLQuery("from Dish order by name ASC");
        return all;
    }

    public boolean insert() {
        try {
            HibernateUtil.executeInsertHQLQuery(this);
        } catch (HibernateException he) {
            System.out.println("error while run func HibernateUtil.executeInsertHQLQuery to insert Dish record: " + he.getMessage());
            return false;
        }
        return true;
    }
    
    public boolean update() {
        String query = String.format("update Dish set name='%s', capital=%f, price=%f, type=%d, updated_by='%s', updated_at=NOW() where id=%d", 
                this.name, this.capital, this.price, this.type, this.updatedBy, this.id);
        try {
            HibernateUtil.executeUpdateHQLQuery(query);
        } catch (HibernateException he) {
            System.out.println("error while run func HibernateUtil.executeUpdateHQLQuery to update Dish record: " + he.getMessage());
            return false;
        }
        return true;
    }

    public boolean delete() {
        String query = String.format("delete Dish where id=%d", this.id);
        try {
            HibernateUtil.executeUpdateHQLQuery(query);
        } catch (HibernateException he) {
            System.out.println("error while run func HibernateUtil.executeUpdateHQLQuery to delete Dish record: " + he.getMessage());
            return false;
        }
        return true;
    }

    public static List<Dish> findByName(String name) {
        String query = QUERY_BASED_ON_DISH_NAME + name + "%'";
        List<Dish> result = new ArrayList<Dish>();
        result = HibernateUtil.executeSelectHQLQuery(query);
        return result;
    }
    
    public static Dish findById(int id) {
        String query = QUERY_BASED_ON_ID + id;
        List<Dish> result = new ArrayList<Dish>();
        result = HibernateUtil.executeSelectHQLQuery(query);
        if (result.size() > 0) {
            return result.get(0);
        }
        return null;
    }
    
}


