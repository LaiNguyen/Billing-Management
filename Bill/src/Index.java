
import java.awt.Color;
import java.awt.Font;
import java.awt.Point;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.AggregatedBill;
import model.Billing;
import model.Dish;
import model.Tables;
import model.UserOrder;
import util.ImageUtil;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author admin
 */
public class Index extends javax.swing.JFrame {

    /**
     * Creates new form Index
     */
    public Index() {

        initComponents();
        prepareJTables();
        prepareJButtons();
    }

    private List<Tables> allTables = new ArrayList<>();
    private List<Dish> allDishes = new ArrayList<>();
    private static Map<Integer, AggregatedBill> allAggregatedBills = new HashMap<Integer, AggregatedBill>();
    private final DishManager dishManagerFrame = new DishManager();
    private final TableManager tableManagerFrame = new TableManager();
    private final RevenueReport revenueReportFrame = new RevenueReport();

    private Tables selectedTable;
    private Dish selectedDish;
    private Billing selectedBill;

    // image utility
    ImageUtil imageUtil = new ImageUtil();

    // date and number formatter
    private final DecimalFormat df = new DecimalFormat("#,###");
    private final SimpleDateFormat customFormat = new SimpleDateFormat("dd/MM HH:mm:ss");

    // font instance
    private final Color BACKGROUND_COLOR = new Color(250, 247, 230);
    private final Font boldFont = new Font("Lucida Grande", Font.BOLD, 13);
    private final Font italicFont = new Font("Lucida Grande", Font.ITALIC, 13);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnEditDish = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableGrid = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        dishGrid = new javax.swing.JTable();
        btnOrder = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        billGrid = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblSelectedTable = new javax.swing.JLabel();
        lblCheckinTime = new javax.swing.JLabel();
        lblTotalCost = new javax.swing.JLabel();
        lblOrder = new javax.swing.JLabel();
        lblEditDish = new javax.swing.JLabel();
        btnEditTable = new javax.swing.JButton();
        btnSwitchTable = new javax.swing.JButton();
        lblEditTable = new javax.swing.JLabel();
        lblSwitchTable = new javax.swing.JLabel();
        btnViewRevenue = new javax.swing.JButton();
        btnCheckBill = new javax.swing.JButton();
        lblViewRevenue = new javax.swing.JLabel();
        lblCheckBill = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        lblReturn = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnEditDish.setPreferredSize(new java.awt.Dimension(50, 50));
        btnEditDish.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnEditDishMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEditDishMouseEntered(evt);
            }
        });
        btnEditDish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDishActionPerformed(evt);
            }
        });

        tableGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                changeTableStatus(evt);
            }
        });
        jScrollPane2.setViewportView(tableGrid);
        tableGrid.getAccessibleContext().setAccessibleName("");

        dishGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        dishGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectDishHandler(evt);
            }
        });
        jScrollPane1.setViewportView(dishGrid);

        btnOrder.setPreferredSize(new java.awt.Dimension(50, 50));
        btnOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnOrderMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnOrderMouseEntered(evt);
            }
        });
        btnOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderActionPerformed(evt);
            }
        });

        billGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        billGrid.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billGridMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(billGrid);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel1.setText("Tổng Tiền:");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 15)); // NOI18N
        jLabel2.setText("Khách ở:");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        jLabel3.setText("Giờ vào:");

        lblSelectedTable.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        lblSelectedTable.setText("a");

        lblCheckinTime.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        lblCheckinTime.setText("a");

        lblTotalCost.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        lblTotalCost.setText("a");

        lblOrder.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblOrder.setText("Gọi Món");

        lblEditDish.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblEditDish.setText("Sửa Món");

        btnEditTable.setPreferredSize(new java.awt.Dimension(50, 50));
        btnEditTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnEditTableMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEditTableMouseEntered(evt);
            }
        });
        btnEditTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTableActionPerformed(evt);
            }
        });

        btnSwitchTable.setPreferredSize(new java.awt.Dimension(50, 50));
        btnSwitchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSwitchTableMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSwitchTableMouseEntered(evt);
            }
        });
        btnSwitchTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchTableActionPerformed(evt);
            }
        });

        lblEditTable.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblEditTable.setText("Sửa Bàn");

        lblSwitchTable.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblSwitchTable.setText("Chuyển Bàn");

        btnViewRevenue.setPreferredSize(new java.awt.Dimension(50, 50));
        btnViewRevenue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnViewRevenueMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnViewRevenueMouseEntered(evt);
            }
        });
        btnViewRevenue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRevenueActionPerformed(evt);
            }
        });

        btnCheckBill.setPreferredSize(new java.awt.Dimension(50, 50));
        btnCheckBill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCheckBillMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCheckBillMouseEntered(evt);
            }
        });
        btnCheckBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckBillActionPerformed(evt);
            }
        });

        lblViewRevenue.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblViewRevenue.setText("Thu Nhập");

        lblCheckBill.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblCheckBill.setText("Tính Tiền");

        btnReturn.setPreferredSize(new java.awt.Dimension(50, 50));
        btnReturn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnReturnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnReturnMouseEntered(evt);
            }
        });
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        lblReturn.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        lblReturn.setText("Trả Lại");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnEditTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86)
                                .addComponent(btnSwitchTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblEditTable, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(lblSwitchTable, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEditDish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEditDish, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(291, 291, 291)
                                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblViewRevenue, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(64, 64, 64)
                                                .addComponent(lblCheckBill, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(5, 5, 5))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(btnViewRevenue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnCheckBill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(21, 21, 21))))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblSelectedTable, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblTotalCost))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblCheckinTime, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(10, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCheckBill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSwitchTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEditTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEditDish, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnViewRevenue, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSwitchTable)
                    .addComponent(lblEditTable)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblEditDish)
                        .addComponent(lblOrder))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblReturn)
                        .addComponent(lblViewRevenue)
                        .addComponent(lblCheckBill)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(lblSelectedTable)
                            .addComponent(jLabel1)
                            .addComponent(lblTotalCost))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(lblCheckinTime))
                        .addGap(28, 28, 28)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 406, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 10, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditDishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDishActionPerformed
        dishManagerFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        dishManagerFrame.setVisible(true);
    }//GEN-LAST:event_btnEditDishActionPerformed

    private void changeTableStatus(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_changeTableStatus
        JTable table = (JTable) evt.getSource();
        Point p = evt.getPoint();
        int row = table.rowAtPoint(p);
        selectedTable = allTables.get(row);

        if (evt.getClickCount() == 2) {
            if (Objects.equals(selectedTable.getStatus(), Tables.STATUS_FREE)) {
                table.getModel().setValueAt(imageUtil.prepareIcon("main/coffee_busy.png"), row, 1);
                selectedTable.setStatus(Tables.STATUS_BUSY);
                // create new billing
                selectedBill = new Billing();
                selectedBill.setTableId(selectedTable.getId());
                selectedBill.insert();
            } else {
                // find current billing
                selectedBill = Billing.findCurentByTableId(selectedTable.getId());
                if (selectedBill != null && selectedBill.getTotalRevenue() > 0) { //TODO: popup to ask users if they are sure to close table
                    return;
                }
                table.getModel().setValueAt(imageUtil.prepareIcon("main/coffee_free.png"), row, 1);
                selectedTable.setStatus(Tables.STATUS_FREE);
                // change status billing to paid
                if (selectedBill != null) {
                    selectedBill.setStatus(Billing.STATUS_PAID);
                    selectedBill.update();
                }

            }
            selectedTable.update();
        }
        // display selected table
        lblSelectedTable.setText(selectedTable.getTabName());

        // find current billing
        selectedBill = Billing.findCurentByTableId(selectedTable.getId());
        if (selectedBill != null) {
//            customFormat.setLenient(false);
            lblCheckinTime.setText(customFormat.format(selectedBill.getCreatedAt()));
            allAggregatedBills = AggregatedBill.findByBilllingId(this.selectedBill.getId());
        } else {
            lblCheckinTime.setText("Bàn đang trống");
        }
        // update billing grid UI
        prepareBillList();
    }//GEN-LAST:event_changeTableStatus

    private void btnOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderActionPerformed
        if (selectedTable == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn bàn ở bảng bên trái khi gọi món");
            return;
        } else if (Objects.equals(selectedTable.getStatus(), Tables.STATUS_FREE)) {
            JOptionPane.showMessageDialog(this, "Bạn phải mở bàn mới có thể gọi món, double-click vào bàn để mở bàn");
            return;
        } else if (selectedDish == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn món ở bảng giữa khi gọi món");
            return;
        }
//        int quantity = Integer.parseInt(JOptionPane.showInputDialog(this, "Vui lòng nhập số lượng bên dưới:", null));
        String response = JOptionPane.showInputDialog(this, "Vui lòng nhập số lượng bên dưới:", null);
        // if user doesn't cancel the order command, system continues processing the flow
        if ((response != null) && (response.length() > 0)) {
            int quantity = Integer.parseInt(response);
            // find current billing
            Billing currentBilling = Billing.findCurentByTableId(selectedTable.getId());
            for (int i = 0; i < quantity; i++) {
                UserOrder order = new UserOrder();
                order.setBillingId(currentBilling.getId());
                order.setDishId(selectedDish.getId());
                order.insert();
            }
            AggregatedBill aggregatedBill = allAggregatedBills.get(selectedDish.getId());
            if (aggregatedBill == null) {
                aggregatedBill = new AggregatedBill(selectedDish.getName(), selectedDish.getType(), quantity, quantity * selectedDish.getPrice(), currentBilling.getId(), selectedDish.getId());
                allAggregatedBills.put(selectedDish.getId(), aggregatedBill);
            } else {
                aggregatedBill.setQuantity(aggregatedBill.getQuantity() + quantity);
                aggregatedBill.setCost(aggregatedBill.getQuantity() * selectedDish.getPrice());
            }
            calculateBill(currentBilling, quantity, selectedDish.getType(), false);
            prepareBillList();
        }
        
    }//GEN-LAST:event_btnOrderActionPerformed

    private void selectDishHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectDishHandler
        JTable table = (JTable) evt.getSource();
        Point p = evt.getPoint();
        int row = table.rowAtPoint(p);
        selectedDish = allDishes.get(row);
    }//GEN-LAST:event_selectDishHandler

    private void btnEditTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTableActionPerformed
        tableManagerFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        tableManagerFrame.setVisible(true);
    }//GEN-LAST:event_btnEditTableActionPerformed

    private void btnSwitchTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchTableActionPerformed
        if (selectedTable == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn bàn ở bảng bên trái khi chuyển bàn");
            return;
        } else if (Objects.equals(selectedTable.getStatus(), Tables.STATUS_FREE)) {
            JOptionPane.showMessageDialog(this, "Bạn phải mở bàn mới có thể chuyển bàn, double-click vào bàn để mở bàn");
            return;
        }
        // eliminate the current selected table
        JComboBox<String> combo = new JComboBox<>();
        for (int i = 0; i < allTables.size(); i++) {
            if (allTables.get(i).getId() != selectedTable.getId()) {
                combo.addItem(allTables.get(i).getTabName());
            }
        }
        int n = JOptionPane.showOptionDialog(this, combo, "Chuyển Đến Bàn", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);
        if (n == JOptionPane.YES_OPTION) {
            String switchTableName = String.valueOf(combo.getSelectedItem());
            for (int i = 0; i < allTables.size(); i++) {
                if (allTables.get(i).getTabName().equals(switchTableName)) {
                    if (Objects.equals(allTables.get(i).getStatus(), Tables.STATUS_BUSY)) {
                        JOptionPane.showMessageDialog(this, switchTableName + " đang có khách, vui lòng chọn bàn khác để chuyển");
                    } else {
                        switchToTable(allTables.get(i), i);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSwitchTableActionPerformed

    private void btnViewRevenueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRevenueActionPerformed
        revenueReportFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        revenueReportFrame.setVisible(true);
    }//GEN-LAST:event_btnViewRevenueActionPerformed

    private void btnCheckBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckBillActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCheckBillActionPerformed

    private void btnEditDishMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditDishMouseEntered
        lblEditDish.setFont(italicFont);
    }//GEN-LAST:event_btnEditDishMouseEntered

    private void btnEditDishMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditDishMouseExited
        lblEditDish.setFont(boldFont);
    }//GEN-LAST:event_btnEditDishMouseExited

    private void btnOrderMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrderMouseEntered
        lblOrder.setFont(italicFont);
    }//GEN-LAST:event_btnOrderMouseEntered

    private void btnOrderMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOrderMouseExited
        lblOrder.setFont(boldFont);
    }//GEN-LAST:event_btnOrderMouseExited

    private void btnEditTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditTableMouseEntered
        lblEditTable.setFont(italicFont);
    }//GEN-LAST:event_btnEditTableMouseEntered

    private void btnEditTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditTableMouseExited
        lblEditTable.setFont(boldFont);
    }//GEN-LAST:event_btnEditTableMouseExited

    private void btnSwitchTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSwitchTableMouseEntered
        lblSwitchTable.setFont(italicFont);
    }//GEN-LAST:event_btnSwitchTableMouseEntered

    private void btnSwitchTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSwitchTableMouseExited
        lblSwitchTable.setFont(boldFont);
    }//GEN-LAST:event_btnSwitchTableMouseExited

    private void btnViewRevenueMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewRevenueMouseEntered
        lblViewRevenue.setFont(italicFont);
    }//GEN-LAST:event_btnViewRevenueMouseEntered

    private void btnViewRevenueMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewRevenueMouseExited
        lblViewRevenue.setFont(boldFont);
    }//GEN-LAST:event_btnViewRevenueMouseExited

    private void btnCheckBillMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCheckBillMouseEntered
        lblCheckBill.setFont(italicFont);
    }//GEN-LAST:event_btnCheckBillMouseEntered

    private void btnCheckBillMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCheckBillMouseExited
        lblCheckBill.setFont(boldFont);
    }//GEN-LAST:event_btnCheckBillMouseExited

    private void btnReturnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReturnMouseExited
        lblReturn.setFont(boldFont);
    }//GEN-LAST:event_btnReturnMouseExited

    private void btnReturnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReturnMouseEntered
        lblReturn.setFont(italicFont);
    }//GEN-LAST:event_btnReturnMouseEntered

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        if (selectedTable == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn bàn ở bảng bên trái khi trả lại món");
            return;
        }
        else if (billGrid.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn món ở bảng bên phải khi trả lại món");
            return;
        }
        
        String response = JOptionPane.showInputDialog(this, "Vui lòng nhập số lượng khách trả lại:", null);
        // if user doesn't cancel the order command, system continues processing the returning orders flow
        if ((response != null) && (response.length() > 0)) {
            int returnedQuantity = Integer.parseInt(response);
            List<AggregatedBill> list = new ArrayList(allAggregatedBills.values());
            AggregatedBill selectedAggregatedBill = list.get(billGrid.getSelectedRow());
            // remove order from DB
            for (int i = 0; i < returnedQuantity; i++) {
                UserOrder order = UserOrder.findByBillingIdAndDishId(selectedAggregatedBill.getBillingId(), selectedAggregatedBill.getDishId());
                order.delete();
            }

            // update memory
            int leftCount = selectedAggregatedBill.getQuantity() - returnedQuantity;
            if (leftCount <= 0) {
                allAggregatedBills.remove(selectedAggregatedBill.getDishId());
                prepareBillList();
            } else {
                float price = selectedAggregatedBill.getCost() / selectedAggregatedBill.getQuantity();
                selectedAggregatedBill.setQuantity(selectedAggregatedBill.getQuantity() - returnedQuantity);
                selectedAggregatedBill.setCost(selectedAggregatedBill.getQuantity() * price);

                // update billing grid UI
                billGrid.getModel().setValueAt(selectedAggregatedBill.getQuantity(), billGrid.getSelectedRow(), 1);
                billGrid.getModel().setValueAt(df.format(selectedAggregatedBill.getCost()), billGrid.getSelectedRow(), 2);
            }

            // update billing
            Billing currentBilling = Billing.findCurentByTableId(selectedTable.getId());
            calculateBill(currentBilling, returnedQuantity, selectedAggregatedBill.getType(), true);

            // update total cost UI
            lblTotalCost.setText(df.format(currentBilling.getTotalRevenue()));
        }

    }//GEN-LAST:event_btnReturnActionPerformed

    private void billGridMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billGridMouseClicked

    }//GEN-LAST:event_billGridMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable billGrid;
    private javax.swing.JButton btnCheckBill;
    private javax.swing.JButton btnEditDish;
    private javax.swing.JButton btnEditTable;
    private javax.swing.JButton btnOrder;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnSwitchTable;
    private javax.swing.JButton btnViewRevenue;
    private javax.swing.JTable dishGrid;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblCheckBill;
    private javax.swing.JLabel lblCheckinTime;
    private javax.swing.JLabel lblEditDish;
    private javax.swing.JLabel lblEditTable;
    private javax.swing.JLabel lblOrder;
    private javax.swing.JLabel lblReturn;
    private javax.swing.JLabel lblSelectedTable;
    private javax.swing.JLabel lblSwitchTable;
    private javax.swing.JLabel lblTotalCost;
    private javax.swing.JLabel lblViewRevenue;
    private javax.swing.JTable tableGrid;
    // End of variables declaration//GEN-END:variables

    private void prepareJTables() {
        prepareTableList();
        prepareDishList();
        prepareBillList();
        this.getContentPane().setBackground(BACKGROUND_COLOR);
    }

    private void prepareJButtons() {
        // edit dish button
        btnEditDish.setIcon(imageUtil.prepareIcon("main/edit_dish.png"));
        btnEditDish.setFocusable(false);

        // edit table button
        btnEditTable.setIcon(imageUtil.prepareIcon("main/edit_table.png"));
        btnEditTable.setFocusable(false);

        // switch table button
        btnSwitchTable.setIcon(imageUtil.prepareIcon("main/change_table.png"));
        btnSwitchTable.setFocusable(false);

        // order button
        btnOrder.setIcon(imageUtil.prepareIcon("main/order.png"));
        btnOrder.setFocusable(false);

        // return button
        btnReturn.setIcon(imageUtil.prepareIcon("main/return.png"));
        btnReturn.setFocusable(false);

        // view revenue button
        btnViewRevenue.setIcon(imageUtil.prepareIcon("main/view_revenue.png"));
        btnViewRevenue.setFocusable(false);

        // check bill button
        btnCheckBill.setIcon(imageUtil.prepareIcon("main/check_bill.png"));
        btnCheckBill.setFocusable(false);
    }

    private void prepareTableList() {
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Tên bàn");
        tableHeaders.add("Tình trạng");
        this.allTables = Tables.getAll();
        for (Object o : allTables) {
            Tables table = (Tables) o;
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(table.getTabName());
            if (Objects.equals(table.getStatus(), Tables.STATUS_FREE)) {
                oneRow.add(imageUtil.prepareIcon("main/coffee_free.png"));
            } else {
                oneRow.add(imageUtil.prepareIcon("main/coffee_busy.png"));
            }
            tableData.add(oneRow);
        }
        tableGrid.setModel(new DefaultTableModel(tableData, tableHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return ImageIcon.class;
                    default:
                        return Object.class;
                }
            }
        });
        tableGrid.setRowHeight(60);
        tableGrid.setFocusable(false);
    }

    private void prepareDishList() {
        Vector<String> dishHeaders = new Vector<String>();
        Vector dishData = new Vector();
        dishHeaders.add("Tên Món");
        dishHeaders.add("Đơn Giá");
        this.allDishes = Dish.getAll();
        for (Object o : allDishes) {
            Dish dish = (Dish) o;
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(dish.getName());
            oneRow.add(df.format(dish.getPrice()));
            dishData.add(oneRow);
        }
        dishGrid.setModel(new DefaultTableModel(dishData, dishHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

            @Override
            public Class<?> getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    default:
                        return Object.class;
                }
            }
        });
        dishGrid.getColumnModel().getColumn(0).setPreferredWidth(160);
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        dishGrid.getTableHeader().getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        dishGrid.setFocusable(false);
    }

    private void prepareBillList() {
        Vector<String> billHeaders = new Vector<String>();
        Vector billData = new Vector();
        Double totalCost = 0.0;
        billHeaders.add("Tên Món");
        billHeaders.add("Số Lượng");
        billHeaders.add("Tiền");
        if (this.selectedBill == null) {
            allAggregatedBills.clear();
        }
        for (Map.Entry<Integer, AggregatedBill> entry : allAggregatedBills.entrySet()) {
            AggregatedBill aggregatedBill = entry.getValue();
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(aggregatedBill.getDishName());
            oneRow.add(aggregatedBill.getQuantity());
            oneRow.add(df.format(aggregatedBill.getCost()));
            billData.add(oneRow);
            totalCost += aggregatedBill.getCost();
        }
        billGrid.setModel(new DefaultTableModel(billData, billHeaders) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

//            @Override
//            public Class<?> getColumnClass(int column) {
//                switch (column) {
//                    case 0:
//                        return String.class;
//                    case 1:
//                        return String.class;
//                    default:
//                        return Object.class;
//                }
//            }
        });
//        billGrid.getColumnModel().getColumn(0).setPreferredWidth(160);
//        billGrid.getColumnModel().getColumn(2).setPreferredWidth(110);

        // align quantity center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        billGrid.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);

        // align money right
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        billGrid.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);

        // set label for total cost
        lblTotalCost.setText(df.format(totalCost));
        lblTotalCost.setHorizontalAlignment(SwingConstants.CENTER);

        // make table unselectable
        billGrid.setFocusable(false);
//        billGrid.setRowSelectionAllowed(false);
    }

    private void switchToTable(Tables table, int newSelectedRow) {
        Billing billing = Billing.findCurentByTableId(selectedTable.getId());
        billing.setTableId(table.getId());
        billing.update();

        // close previous table
        selectedTable.setStatus(Tables.STATUS_FREE);
        selectedTable.update();
        int selectedRow = tableGrid.getSelectedRow();
        tableGrid.getModel().setValueAt(imageUtil.prepareIcon("main/coffee_free.png"), selectedRow, 1);

        // open switched table also
        tableGrid.setRowSelectionInterval(newSelectedRow, newSelectedRow);
        tableGrid.getModel().setValueAt(imageUtil.prepareIcon("main/coffee_busy.png"), newSelectedRow, 1);
        table.setStatus(Tables.STATUS_BUSY);
        table.update();
        selectedTable = table;
    }

    private void calculateBill(Billing currentBilling, int quantity, int dishType, boolean isSubstracted) {
        float capital = selectedDish.getCapital() * quantity;
        float revenue = selectedDish.getPrice() * quantity;
        if (dishType == Dish.TYPE_DRINK) {
            if (isSubstracted) {
                currentBilling.setDrinkCost(currentBilling.getDrinkCost() - revenue);
                currentBilling.setDrinkCapital(currentBilling.getDrinkCapital() - capital);
            } else {
                currentBilling.setDrinkCost(currentBilling.getDrinkCost() + revenue);
                currentBilling.setDrinkCapital(currentBilling.getDrinkCapital() + capital);
            }
        } else {
            if (isSubstracted) {
                currentBilling.setFoodCost(currentBilling.getFoodCost() - revenue);
                currentBilling.setFoodCapital(currentBilling.getFoodCapital() - capital);
            } else {
                currentBilling.setFoodCost(currentBilling.getFoodCost() + revenue);
                currentBilling.setFoodCapital(currentBilling.getFoodCapital() + capital);
            }
            
        }
        if (isSubstracted) {
            currentBilling.setTotalRevenue(currentBilling.getTotalRevenue() - revenue);
            currentBilling.setTotalCapital(currentBilling.getTotalCapital() - capital);
        } else {
            currentBilling.setTotalRevenue(currentBilling.getTotalRevenue() + revenue);
            currentBilling.setTotalCapital(currentBilling.getTotalCapital() + capital);
        }
        currentBilling.update();
    }

}
